<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0065)file:///C:/Users/NealLee/Desktop/Clock%20-%20Wind.js%20Sample.htm -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Clock - Wind.js Sample</title>
    <meta http-equiv="X-UA-Compatible" content="IE=9">    
    
    <script src="wind-all-0.7.3.js"></script>
     <!-- <script src="wind-compiler.js"></script>
    <script src="wind-builderbase.js"></script>
    <script src="wind-async.js"></script> -->

    <script>
        var drawHand = function(value, length) {
            ctx.beginPath();
            
            var angle = Math.PI * 2 * value / 60;
            var x = Math.sin(angle) * length;
            var y = Math.cos(angle) * length;
            
            ctx.moveTo(100, 100);
            ctx.lineTo(100 + x, 100 - y);
            ctx.stroke();
        }
    
        var drawClock = function(time) {
            if (!ctx) {
                var h = time.getHours();
                var m = time.getMinutes();
                var s = time.getSeconds();
                
                var text = 
                    ((h >= 10) ? h : "0" + h) + ":" +
                    ((h >= 10) ? m : "0" + m) + ":" +
                    ((h >= 10) ? s : "0" + s);
                
                document.getElementById("clockText").innerHTML = text;
                return;
            }
        
            ctx.clearRect(0, 0, 200, 200);
            
            ctx.beginPath();
            ctx.arc(100, 100, 90, 0, Math.PI * 2, false);
            for (var i = 0; i < 60; i += 5) {
                var angle = Math.PI * 2 * i / 60;
                var x = Math.sin(angle);
                var y = Math.cos(angle);
                ctx.moveTo(100 + x * 85, 100 - y * 85);
                ctx.lineTo(100 + x * 90, 100 - y * 90);
            }
            ctx.stroke();
            
            drawHand(time.getSeconds(), 80);
            drawHand(time.getMinutes() + time.getSeconds() * 1.0 / 60, 60);
            drawHand(time.getHours() % 12 * 5 + time.getMinutes() * 1.0 / 12, 40);
        }
    
        var drawClockAsync = eval(Wind.compile("async", function(interval) {
            while (true) {
                drawClock(new Date());
                $await(Wind.Async.sleep(interval));
            }
        }));

        /******************start 这段代码用来测试wind.js 异步的 “并行” 这是伪并行****************************/
        //方法a 执行需要2s
        var a = eval(Wind.compile("async", function() {
             $await(Wind.Async.sleep(2000));
             return "a";
        }));
        //方法a 执行需要3s
        var b = eval(Wind.compile("async", function() {
            $await(Wind.Async.sleep(3000));
            
             return "b";
        }));
        var c = eval(Wind.compile("async", function() {
            $await(Wind.Async.sleep(5000));
            
             return "b";
        }));
        
        var d = eval(Wind.compile("async", function() {
            $await(Wind.Async.sleep(1000));
            
             return "b";
        }));

        var e = eval(Wind.compile("async", function() {
            $await(Wind.Async.sleep(3000));
            
             return "b";
        }));
        //传统执行需要 T(a()) + T(b()) = 5s [T(f(n))代表函数f(n)的执行时间]
        var fn1 = eval(Wind.compile("async", function() {
            var bengin = new Date();
            var br =  $await(a());
            var ar = $await(b());
            alert(new Date() - bengin);
        }));

        //用异步来"并行"执行，则只需要 Max(T(a()),T(b())) = 3s
        var fn2 = eval(Wind.compile("async", function() {
            var bengin = new Date();

            var t = a();
            t.start();
            var t2 = b();
            t2.start();
            var t3 = c();
            t3.start();
            var t4 = d();
            t4.start();
            var t5 = e();
            t5.start();

            var br =  $await(b());
            var ar = $await(t);
            var ar = $await(t2);
            var ar = $await(t3);
            //var ar = $await(t4);
            var ar = $await(t5);
            alert(new Date() - bengin);
        }));

        /******************end 这段代码用来测试wind.js 异步的 “并行” 这是伪并行****************************/

        var fn3 = eval(Wind.compile("async", function() {
            var bengin = new Date();
            var a = 0, current = 1;
            while (new Date()-bengin < 5000) {
                a++;
                //$await(Wind.Async.sleep(0));
                console.log(a);
            }
        }));
        
        
        
    </script>
</head>
<body>
    <canvas id="clockCanvas" height="200" width="200">
        <div id="clockText" style="font-size:20pt;"></div>
    </canvas>
    <script>
        var canvas = document.getElementById("clockCanvas");
        var ctx = canvas.getContext ? canvas.getContext("2d") : null;
        drawClockAsync(1000).start();
        fn2().start();
    </script>



</body></html>